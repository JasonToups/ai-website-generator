# Project Intelligence - AI Website Generator

## Python Environment Commands

**CRITICAL**: Always use `python3` for Python commands in new terminal windows unless Poetry environment is explicitly activated.

```bash
# Correct commands for this project:
python3 script.py          # For standalone scripts
poetry run python script.py # For scripts requiring project dependencies
make backend               # Uses Poetry automatically
```

## Project Patterns

### File Parsing Implementation

- **Phase 1 COMPLETE**: Core parser module working with 100% success rate
- **Phase 2 COMPLETE**: Project structure manager creating individual files and ZIP archives
- **Regex Pattern**: ` r'(\d+)\.\s+([^\n]+)\n\n```(\w+)\n(.*?)\n```' ` successfully extracts all file blocks
- **Validation**: TypeScript, JSON, and Markdown validation working correctly
- **Structure**: Hierarchical project structure creation functional
- **File Creation**: Individual files written to disk with proper folder structure
- **ZIP Archives**: Downloadable project archives generated successfully

### CrewAI Agent Patterns

- **Claude 3.5 Sonnet**: All agents upgraded to `claude-3-5-sonnet-20240620`
- **Token Limits**: 8192 tokens enabling complete code generation
- **Output Format**: Numbered files with code blocks - perfectly parsed by our file parser

### Development Workflow

- **Memory-First**: Always document plans before implementation
- **Phase-Based**: Implement in clear phases with testing between each
- **Test-Driven**: Create test scripts to validate functionality

## Current Implementation Status

### âœ… Phase 1: Core Parser - COMPLETE

- File parser module created and tested
- 100% success rate on existing crew output
- All file types (TSX, JSON, MD) properly validated
- Hierarchical project structure working

### âœ… Phase 2: Project Structure Manager - COMPLETE

- Individual files created on disk with proper folder structure
- ZIP archives generated for download (5.8KB for 8-file project)
- File manifest with complete metadata tracking
- File tree generation for frontend display
- Individual file retrieval functionality

### ðŸŽ¯ Next: Phase 3: API Integration

- Add new API endpoints for file operations
- Enhance existing project generation flow
- Update project status tracking with file metadata
- Add comprehensive error handling

## Key Technical Insights

### File Parsing Success Factors

1. **Regex Precision**: The pattern captures numbered files with language-specific code blocks
2. **Content Validation**: Type-specific validation ensures code quality
3. **Structure Creation**: Hierarchical organization matches expected project layout
4. **Error Handling**: Comprehensive error tracking and reporting

### Project Structure Success Factors

1. **Physical File Creation**: All parsed files written to individual files on disk
2. **ZIP Archive Generation**: Complete projects packaged for easy download
3. **Metadata Tracking**: Comprehensive manifest files with project information
4. **File Tree Generation**: Hierarchical structure for frontend display

### Project Quality Indicators

- **8 files extracted** from crew output (App.tsx + 5 components + package.json + README.md)
- **Perfect validation** across all file types
- **Proper folder structure** with src/ and src/components/ directories
- **Complete metadata** including file sizes, extensions, and validation status
- **Individual files on disk** ready for development use
- **ZIP archives** ready for download and distribution

This project demonstrates excellent AI collaboration patterns and systematic implementation approach.
